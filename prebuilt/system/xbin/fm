#!/system/bin/sh

# Copyright 2011 Michael A. Reid with a BSD sort of license
#

echo "Welcome to the Android FM Radio Script for TI chips"
echo ""

MINFREQ=87500
MAXFREQ=108000
SCANFREQ=$MINFREQ
SCANOFFSET=100
DEFAULTVOLUME=20

FREQFILE="/mnt/sdcard/FM.freq"

usage()
{
    echo "Usage: fm [freq|vol|scan|n|p|go|off]"
    echo ""
    echo "  freq"
    echo "      specify freq(kHz)($MINFREQ-$MAXFREQ)"
    echo "   vol"
    echo "      specify volume(%)(0-100)"
    echo "  scan"
    echo "      scan avaiable frequencies"
    echo "   n/p"
    echo "      searching forward/backward"
    echo "    go"
    echo "      continue if being muted"
    echo "   off"
    echo "      tune off FM"
    echo ""
    echo "YOU MUST BE ROOT TO RUN THIS SCRIPT"
    echo ""
}

# Auto one step forward
freq_scan()
{
    [ $# == 1 ] && DIR="$1"
    [ $# == 0 ] && DIR="01"
    # FM_WRITE: SEARCH_LVL_SET: 0x10 = 16 (default 7)
    hcitool cmd 0x3f 0x135 0x0f 0x02 0x00 0x00 0x10
    # FM_WRITE: SEARCH_DIR_SET, 0 = down, 1 = up
    hcitool cmd 0x3f 0x135 0x1b 0x02 0x00 0x00 0x${DIR}
    # FM_WRITE: TUNER_MODE_SET, TUNER_MODE_AUTO_SEEK
    hcitool cmd 0x3f 0x135 0x2d 0x02 0x00 0x00 0x02
}

# Get the current frequency
freq_put()
{
    RESID="  01 33 FD 00 "
    VALH=`hcitool cmd 3f 133 a 2 0 | grep "$RESID" | sed "s/$RESID//" | sed "s/ //"`
    if [ ! -z "$VALH" ]
    then
        FREQD=`printf "%d" 0x$VALH`
        SCANFREQ=$((FREQD*50+$MINFREQ))
    fi
}

# wait for scanning to stop
wait_scan()
{
    sleep 1

    FREQ1=0
    FREQ2=1
    while [ $FREQ1 != $FREQ2 ]
    do
        freq_put
        FREQ1=$SCANFREQ
        # duration for scanning
        sleep 1
        freq_put
        FREQ2=$SCANFREQ
    done
}

# KiloHertz
freq_set()
{
    FREQ="$1"
    FREQSTPL=$(((FREQ-$MINFREQ)/50%256))
    FREQSTPH=$(((FREQ-$MINFREQ)/50/256))
    FREQHEXL=`printf "%2.2x" $FREQSTPL`
    FREQHEXH=`printf "%2.2x" $FREQSTPH`

    hcitool cmd 0x3f 0x135 0x0a 0x02 0x00 $FREQHEXH $FREQHEXL
    hcitool cmd 0x3f 0x135 0x2d 0x02 0x00 0x00 0x01
}

# Percentage
vol_set()
{
    VOL="$1"
    VOLCHIPL=$((VOL*655%256))
    VOLCHIPH=$((VOL*655/256))
    VOLHEXL=`printf "%2.2x" $VOLCHIPL`
    VOLHEXH=`printf "%2.2x" $VOLCHIPH`

    hcitool cmd 0x3f 0x135 0x1c 0x02 0x00 $VOLHEXH $VOLHEXL
}

# Power off
fm_off()
{
    # FM Rx and RDS off
    hcitool cmd 0x3f 0x135 0x20 0x02 0x00 0x00 0x00
    # FM_POWER_MODE: FM Core power off
    hcitool cmd 0x3f 0x137 0x10 0x00

    # FM disabled
    echo "disable" > /sys/class/htc_accessory/fm/flag
}

# Power on
fm_on()
{
    # FM_POWER_MODE: FM Core power up
    hcitool cmd 0x3f 0x137 0x01 0x01
    # 2 throwaway commands to work around bug
    hcitool cmd 0x3f 0x133 0x20 0x02 0x00
    hcitool cmd 0x3f 0x133 0x20 0x02 0x00
    # FM Rx on, no RDS
    hcitool cmd 0x3f 0x135 0x20 0x02 0x00 0x00 0x01
    hcitool cmd 0x3f 0x133 0x20 0x02 0x00
    # FM_WRITE: AUDIO_ENABLE: AUDIO_ENABLE_ANALOG | AUDIO_ENABLE_I2S (both)
    hcitool cmd 0x3f 0x135 0x1d 0x02 0x00 0x00 0x03

    # Headset
    echo "fm_headset" > /sys/class/htc_accessory/fm/flag
}

# FM status check
fm_stat()
{
    echo "checking FM status..."
    bttest is_enabled
    [[ $? -eq 0 ]] && echo "FM is not running" && exit 1
}

# Force to enable BT
bt_on()
{
    echo "Enabling bluetooth..."
    bttest is_enabled
    [[ $? -eq 0 ]] && bttest enable
}

# Check the input whether it is a number
is_num()
{
    if [ `echo "$1" | sed 's/^[0-9][0-9]*$//' | wc -c` == 1 ]
    then
        return 1
    else
        return 0
    fi
}

if [ x`busybox whoami` != x'root' ]
then
    echo "Please switch to root first"
    exit 1
fi

if [ $# != 1 ]
then
    usage
    exit 1
else
    ARG=$1

    # tune off the FM
    if [ x"$ARG" == x"off" ]
    then
        # Check BT first
        bttest is_enabled
        if [ $? -eq 1 ]
        then
            fm_off
            bttest disable
            echo ""
            echo "FM is off now"
        fi

        exit 0
    # scanning frequencies
    elif [ x"$ARG" == x"scan" ]
    then
        bt_on

        # FM_WRITE: CHANL_BW_SET: FM_CHANNEL_SPACING_100KHZ
        hcitool cmd 0x3f 0x135 0x38 0x02 0x00 0x00 0x02

        # clean up previous results
        echo -n '' > $FREQFILE

        # start FM first
        fm_on
        vol_set $DEFAULTVOLUME
        snd_set_device 9

        # scanning
        SCANFEQ=$MINFREQ
        while [ $SCANFREQ -le $MAXFREQ ]
        do
            freq_set $SCANFREQ
            echo ""
            echo "Scanning FREQ: $SCANFREQ kHz"
            echo ""
            freq_scan
            wait_scan

            # HIT
            echo $SCANFREQ >> $FREQFILE
            # offset
            SCANFREQ=$((SCANFREQ+SCANOFFSET))
        done

        freq_set `head -n 1 $FREQFILE`

        echo ""
        echo "--- Available Frequencies(kHz) ---"
        cat /mnt/sdcard/FM.freq | tr '\n' ' ' | sed "s/ $MAXFREQ//"
        echo ""
        echo ""

        exit 0
    # one step to search forward or backward
    elif [ x"$ARG" == x"n" -o x"$ARG" == x"p" ]
    then
        fm_stat

        # FM_WRITE: CHANL_BW_SET: FM_CHANNEL_SPACING_100KHZ
        hcitool cmd 0x3f 0x135 0x38 0x02 0x00 0x00 0x02

        # get the current freq
        freq_put
        if [ "$ARG" == "n" ]
        then
            # offset
            SCANFREQ=$((SCANFREQ+SCANOFFSET))
            freq_set $SCANFREQ
            if [ $SCANFREQ -gt $MAXFREQ ]
            then
                # loop back
                SCANFREQ=$MINFREQ
                freq_set $SCANFREQ
            fi
            # searching upward
            freq_scan "01"
        else
            # offset
            SCANFREQ=$((SCANFREQ-SCANOFFSET))
            freq_set $SCANFREQ
            if [ $SCANFREQ -lt $MINFREQ ]
            then
                # loop back
                SCANFREQ=$MAXFREQ
                freq_set $SCANFREQ
            fi
            # searching downward
            freq_scan "00"
        fi

        wait_scan
        freq_set $SCANFREQ
        echo ""
        echo "Current FM Frequency: $SCANFREQ kHz"
        echo ""

        exit 0
    # continue FM if being muted by other audio stuff
    elif [ x"$ARG" == x"go" ]
    then
        fm_stat

        # re-routing to FM headset
        snd_set_device 9

        exit 0
    # set volume by percentage
    else
        is_num "$ARG"
        if [ $? == 1 ]
        then
            if [ ${ARG%.*} -ge 0 -a ${ARG%.*} -le 100 ]
            then
                fm_stat
                vol_set $ARG

                exit 0
            # FM power on and tune to the specifiled frequency
            elif [ ${ARG%.*} -ge $MINFREQ -a ${ARG%.*} -le $MAXFREQ ]
            then
                bt_on

                # start FM
                fm_on
                # init default volume
                vol_set $DEFAULTVOLUME
                # set the frequency
                freq_set $ARG

                # routing to headset
                snd_set_device 9  # 11 for speaker

                echo ""
                echo "All done, enjoy!"
            fi
        else
            usage
            exit 1
        fi
    fi
fi
